// <auto-generated />
using System;
using Komi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Komi.Data.Migrations
{
    [DbContext(typeof(KomiContext))]
    [Migration("20200617021615_IdsToInt")]
    partial class IdsToInt
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Komi.Data.Models.Discord.Guild.Group", b =>
                {
                    b.Property<decimal>("GroupId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("WorkerId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("GroupId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Komi.Data.Models.Discord.Guild.GroupMember", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("GroupId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("GroupMemberId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("Komi.Data.Models.Discord.User.Member", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("Komi.Data.Models.Discord.User.User", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Komi.Data.Models.Moderation.ModerationData", b =>
                {
                    b.Property<int>("ModerationDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("GroupId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("ModerationDataId");

                    b.HasIndex("GroupId")
                        .IsUnique();

                    b.ToTable("ModerationData");
                });

            modelBuilder.Entity("Komi.Data.Models.Moderation.ModerationSetting", b =>
                {
                    b.Property<decimal>("GroupId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int?>("BanAt")
                        .HasColumnType("integer");

                    b.Property<int?>("KickAt")
                        .HasColumnType("integer");

                    b.HasKey("GroupId");

                    b.ToTable("ModerationSetting");
                });

            modelBuilder.Entity("Komi.Data.Models.Moderation.WarningData", b =>
                {
                    b.Property<int>("WarningDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("ModId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int?>("ModerationDataId")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("WarningDataId");

                    b.HasIndex("ModerationDataId");

                    b.ToTable("WarningData");
                });

            modelBuilder.Entity("Komi.Data.Models.Settings.GroupSetting", b =>
                {
                    b.Property<decimal>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("TrackingChannel")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("GroupId");

                    b.ToTable("GroupSetting");
                });

            modelBuilder.Entity("Komi.Data.Models.Settings.Prefix", b =>
                {
                    b.Property<int>("PrefixId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("GroupSettingGroupId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PrefixId");

                    b.HasIndex("GroupSettingGroupId");

                    b.ToTable("Prefix");
                });

            modelBuilder.Entity("Komi.Data.Models.Settings.WorkTypeSetting", b =>
                {
                    b.Property<int>("WorkTypeSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("GroupSettingGroupId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("WorkType")
                        .HasColumnType("integer");

                    b.HasKey("WorkTypeSettingId");

                    b.HasIndex("GroupSettingGroupId");

                    b.ToTable("WorkTypeSetting");
                });

            modelBuilder.Entity("Komi.Data.Models.Tracking.Job", b =>
                {
                    b.Property<decimal>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<decimal?>("WorkId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("JobId");

                    b.HasIndex("WorkId");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("Komi.Data.Models.Tracking.Scanlation.Series", b =>
                {
                    b.Property<long>("SeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("GroupId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("SeriesId");

                    b.HasIndex("GroupId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("Komi.Data.Models.Tracking.Scanlation.Work", b =>
                {
                    b.Property<decimal>("WorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<int?>("Chapter")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("GroupId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("OverridenStatus")
                        .HasColumnType("integer");

                    b.Property<long?>("SeriesId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Volume")
                        .HasColumnType("integer");

                    b.HasKey("WorkId");

                    b.HasIndex("GroupId");

                    b.HasIndex("SeriesId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("Komi.Data.Models.Tracking.Worker", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("Finished")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("JobId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("Started")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("WorkerId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Worker");
                });

            modelBuilder.Entity("Komi.Data.Models.Discord.Guild.Group", b =>
                {
                    b.HasOne("Komi.Data.Models.Tracking.Worker", null)
                        .WithMany("Groups")
                        .HasForeignKey("WorkerId");
                });

            modelBuilder.Entity("Komi.Data.Models.Discord.Guild.GroupMember", b =>
                {
                    b.HasOne("Komi.Data.Models.Discord.Guild.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Komi.Data.Models.Discord.User.Member", "Member")
                        .WithMany("Groups")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Komi.Data.Models.Discord.User.Member", b =>
                {
                    b.HasOne("Komi.Data.Models.Discord.User.User", "User")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Komi.Data.Models.Moderation.ModerationData", b =>
                {
                    b.HasOne("Komi.Data.Models.Discord.Guild.Group", "Group")
                        .WithOne("ModerationData")
                        .HasForeignKey("Komi.Data.Models.Moderation.ModerationData", "GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Komi.Data.Models.Moderation.ModerationSetting", b =>
                {
                    b.HasOne("Komi.Data.Models.Discord.Guild.Group", null)
                        .WithOne("ModerationSettings")
                        .HasForeignKey("Komi.Data.Models.Moderation.ModerationSetting", "GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Komi.Data.Models.Moderation.WarningData", b =>
                {
                    b.HasOne("Komi.Data.Models.Moderation.ModerationData", null)
                        .WithMany("Warnings")
                        .HasForeignKey("ModerationDataId");
                });

            modelBuilder.Entity("Komi.Data.Models.Settings.GroupSetting", b =>
                {
                    b.HasOne("Komi.Data.Models.Discord.Guild.Group", null)
                        .WithOne("GroupSettings")
                        .HasForeignKey("Komi.Data.Models.Settings.GroupSetting", "GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Komi.Data.Models.Settings.Prefix", b =>
                {
                    b.HasOne("Komi.Data.Models.Settings.GroupSetting", null)
                        .WithMany("Prefixes")
                        .HasForeignKey("GroupSettingGroupId");
                });

            modelBuilder.Entity("Komi.Data.Models.Settings.WorkTypeSetting", b =>
                {
                    b.HasOne("Komi.Data.Models.Settings.GroupSetting", null)
                        .WithMany("DefaultWorkTypes")
                        .HasForeignKey("GroupSettingGroupId");
                });

            modelBuilder.Entity("Komi.Data.Models.Tracking.Job", b =>
                {
                    b.HasOne("Komi.Data.Models.Tracking.Scanlation.Work", null)
                        .WithMany("Jobs")
                        .HasForeignKey("WorkId");
                });

            modelBuilder.Entity("Komi.Data.Models.Tracking.Scanlation.Series", b =>
                {
                    b.HasOne("Komi.Data.Models.Discord.Guild.Group", null)
                        .WithMany("Projects")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("Komi.Data.Models.Tracking.Scanlation.Work", b =>
                {
                    b.HasOne("Komi.Data.Models.Discord.Guild.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Komi.Data.Models.Tracking.Scanlation.Series", null)
                        .WithMany("Works")
                        .HasForeignKey("SeriesId");
                });

            modelBuilder.Entity("Komi.Data.Models.Tracking.Worker", b =>
                {
                    b.HasOne("Komi.Data.Models.Tracking.Job", "Job")
                        .WithMany("Workers")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
